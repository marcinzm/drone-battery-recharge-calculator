<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NuGet.Packaging</name>
    </assembly>
    <members>
        <member name="T:NuGet.Packaging.NuspecReader">
            <summary>
            Reads .nuspec files
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.#ctor(System.IO.Stream)">
            <summary>
            Nuspec file reader
            </summary>
            <param name="stream">Nuspec file stream.</param>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.#ctor(System.Xml.Linq.XDocument)">
            <summary>
            Nuspec file reader
            </summary>
            <param name="xml">Nuspec file xml data.</param>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.#ctor(System.IO.Stream,NuGet.Frameworks.IFrameworkNameProvider)">
            <summary>
            Nuspec file reader
            </summary>
            <param name="stream">Nuspec file stream.</param>
            <param name="frameworkProvider">Framework mapping provider for NuGetFramework parsing.</param>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.#ctor(System.Xml.Linq.XDocument,NuGet.Frameworks.IFrameworkNameProvider)">
            <summary>
            Nuspec file reader
            </summary>
            <param name="xml">Nuspec file xml data.</param>
            <param name="frameworkProvider">Framework mapping provider for NuGetFramework parsing.</param>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetDependencyGroups">
            <summary>
            Read package dependencies for all frameworks
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetReferenceGroups">
            <summary>
            Reference item groups
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetFrameworkReferenceGroups">
            <summary>
            Framework reference groups
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetLanguage">
            <summary>
            Package language
            </summary>
        </member>
        <member name="M:NuGet.Packaging.NuspecReader.GetContentFiles">
            <summary>
            Build action groups
            </summary>
        </member>
        <member name="T:NuGet.Packaging.PackageFolderReader">
            <summary>
            Reads an unzipped nupkg folder.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.#ctor(System.String)">
            <summary>
            Package folder reader
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.#ctor(System.IO.DirectoryInfo)">
            <summary>
            Package folder reader
            </summary>
            <param name="folder">root directory of an extracted nupkg</param>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.#ctor(System.String,NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Package folder reader
            </summary>
            <param name="folderPath">root directory of an extracted nupkg</param>
            <param name="frameworkProvider">framework mappings</param>
            <param name="compatibilityProvider">framework compatibility provider</param>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.#ctor(System.IO.DirectoryInfo,NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Package folder reader
            </summary>
            <param name="folder">root directory of an extracted nupkg</param>
            <param name="frameworkProvider">framework mappings</param>
            <param name="compatibilityProvider">framework compatibility provider</param>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.GetNuspec">
            <summary>
            Opens the nuspec file in read only mode.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.GetStream(System.String)">
            <summary>
            Opens a local file in read only mode.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageFolderReader.GetRelativePath(System.IO.DirectoryInfo,System.IO.FileInfo)">
            <summary>
            Build the relative path in the same format that ZipArchive uses
            </summary>
        </member>
        <member name="T:NuGet.Packaging.PackageReader">
            <summary>
            Reads a development nupkg
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReader.#ctor(System.IO.Stream)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="stream">Nupkg data stream.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageReader.#ctor(System.IO.Stream,NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="stream">Nupkg data stream.</param>
            <param name="frameworkProvider">Framework mapping provider for NuGetFramework parsing.</param>
            <param name="compatibilityProvider">Framework compatibility provider.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="stream">Nupkg data stream.</param>
            <param name="leaveStreamOpen">If true the nupkg stream will not be closed by the zip reader.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageReader.#ctor(System.IO.Stream,System.Boolean,NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="stream">Nupkg data stream.</param>
            <param name="leaveStreamOpen">leave nupkg stream open</param>
            <param name="frameworkProvider">Framework mapping provider for NuGetFramework parsing.</param>
            <param name="compatibilityProvider">Framework compatibility provider.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageReader.#ctor(System.IO.Compression.ZipArchive)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="zipArchive">ZipArchive containing the nupkg data.</param>
        </member>
        <member name="M:NuGet.Packaging.PackageReader.#ctor(System.IO.Compression.ZipArchive,NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Nupkg package reader
            </summary>
            <param name="zipArchive">ZipArchive containing the nupkg data.</param>
            <param name="frameworkProvider">Framework mapping provider for NuGetFramework parsing.</param>
            <param name="compatibilityProvider">Framework compatibility provider.</param>
        </member>
        <member name="P:NuGet.Packaging.PackageReader.ZipArchive">
            <summary>
            Underlying zip archive
            </summary>
        </member>
        <member name="T:NuGet.Packaging.PackageReaderBase">
            <summary>
            Abstract class that both the zip and folder package readers extend
            This class contains the path convetions for both zip and folder readers
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.#ctor(NuGet.Frameworks.IFrameworkNameProvider)">
            <summary>
            Core package reader
            </summary>
            <param name="frameworkProvider">framework mapping provider</param>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.#ctor(NuGet.Frameworks.IFrameworkNameProvider,NuGet.Frameworks.IFrameworkCompatibilityProvider)">
            <summary>
            Core package reader
            </summary>
            <param name="frameworkProvider">framework mapping provider</param>
            <param name="compatibilityProvider">framework compatibility provider</param>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.GetSupportedFrameworks">
            <summary>
            Frameworks mentioned in the package.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.IsAllowedBuildFile(System.String,System.String)">
            <summary>
            only packageId.targets and packageId.props should be used from the build folder
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.IsReferenceAssembly(System.String)">
            <summary>
            True only for assemblies that should be added as references to msbuild projects
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReaderBase.GetPropertyValues(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Return property values for the given key. Case-sensitive.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.PackageReference">
            <summary>
            Represents a package element in the packages.config file
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReference.#ctor(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Creates a new packages config entry
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReference.#ctor(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework,System.Boolean)">
            <summary>
            Creates a new packages config entry
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReference.#ctor(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Creates a new packages config entry
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReference.#ctor(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework,System.Boolean,System.Boolean,System.Boolean,NuGet.Versioning.VersionRange)">
            <summary>
            Creates a new packages config entry
            </summary>
            <param name="identity">Package id and version</param>
            <param name="targetFramework">Package target framework installed to the project</param>
            <param name="userInstalled">True if the user installed this package directly</param>
            <param name="developmentDependency">True if the package is a development dependency</param>
            <param name="requireReinstallation">True if this package needs to be reinstalled</param>
            <param name="allowedVersions">Restrict package versions to the allowedVersions range</param>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.PackageIdentity">
            <summary>
            Id and Version of the package
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.AllowedVersions">
            <summary>
            The allowed range of versions that this package can be upgraded/downgraded to.
            </summary>
            <remarks>This is null if unbounded</remarks>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.HasAllowedVersions">
            <summary>
            True if allowedVersions exists.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.TargetFramework">
            <summary>
            Installed target framework version of the package.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.IsDevelopmentDependency">
            <summary>
            Development dependency
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.IsUserInstalled">
            <summary>
            True if the user installed or updated this package directly.
            False if this package was installed as a dependency by another package.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.PackageReference.RequireReinstallation">
            <summary>
            Require reinstallation
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageReference.ToString">
            <summary>
            Displays the identity and target framework of the reference.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfig.HasAttributeValue(System.Xml.Linq.XElement,System.String,System.String,System.Xml.Linq.XElement@)">
            <summary>
            Determine if the package node has the attribute value as the targetValue.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfig.BoolAttribute(System.Xml.Linq.XElement,System.String,System.Boolean)">
            <summary>
            Get a boolean attribute value, or false if it does not exist
            </summary>
        </member>
        <member name="T:NuGet.Packaging.PackagesConfigReader">
            <summary>
            Reads packages.config
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.#ctor(System.Xml.Linq.XDocument)">
            <summary>
            Packages.config reader
            </summary>
            <param name="xml">Packages.config XML</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.#ctor(NuGet.Frameworks.IFrameworkNameProvider,System.Xml.Linq.XDocument)">
            <summary>
            Packages.config reader
            </summary>
            <param name="frameworkMappings">Additional target framework mappings for parsing target frameworks</param>
            <param name="xml">Packages.config XML</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.#ctor(System.IO.Stream)">
            <summary>
            Packages.config reader
            </summary>
            <param name="stream">Stream containing packages.config</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Packages.config reader
            </summary>
            <param name="stream">Stream containing packages.config</param>
            <param name="leaveStreamOpen">True will leave the stream open</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.#ctor(NuGet.Frameworks.IFrameworkNameProvider,System.IO.Stream,System.Boolean)">
            <summary>
            Packages.config reader
            </summary>
            <param name="stream">Stream containing packages.config</param>
            <param name="leaveStreamOpen">True will leave the stream open</param>
            <param name="frameworkMappings">Additional target framework mappings for parsing target frameworks</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.GetMinClientVersion">
            <summary>
            Reads the minimum client version from packages.config
            </summary>
            <returns>Minimum client version or the default of 2.5.0</returns>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.GetPackages">
            <summary>
            Reads all package node entries in the config.
            If duplicate package ids exist an exception will be thrown.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigReader.GetPackages(System.Boolean)">
            <summary>
            Reads all package node entries in the config.
            </summary>
            <param name="allowDuplicatePackageIds">If True validation will be performed to ensure that 
            only one entry exists for each unique package id.</param>
        </member>
        <member name="T:NuGet.Packaging.PackagesConfigWriter">
            <summary>
            Writes the packages.config XML file to a stream
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.#ctor(System.String,System.Boolean)">
            <summary>
            Create a packages.config writer using file path
            </summary>
            <param name="fullPath">The full path to write the XML packages.config file into, or load existing packages.config from</param>
            <param name="createNew">Whether to create a new packages.config file, or load an existing one</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.#ctor(System.String,System.Boolean,NuGet.Frameworks.IFrameworkNameProvider)">
            <summary>
            Create a packages.config writer using file path
            </summary>
            <param name="fullPath">The full path to write the XML packages.config file into, or load existing packages.config from</param>
            <param name="createNew">Whether to create a new packages.config file, or load an existing one</param>
            <param name="frameworkMappings">Framework mappings</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.#ctor(System.IO.Stream,System.Boolean)">
            <summary>
            Create a packages.config writer using stream
            </summary>
            <param name="stream">Stream to write the XML packages.config file into, or load existing packages.config from</param>
            <param name="createNew">Whether to create a new packages.config file, or load an existing one</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.#ctor(System.IO.Stream,System.Boolean,NuGet.Frameworks.IFrameworkNameProvider)">
            <summary>
            Create a packages.config writer using stream
            </summary>
            <param name="stream">Stream to write the XML packages.config file into, or load existing packages.config from</param>
            <param name="createNew">Whether to create a new packages.config file, or load an existing one</param>
            <param name="frameworkMappings">Framework mappings</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.WriteMinClientVersion(NuGet.Versioning.NuGetVersion)">
            <summary>
            Write a minimum client version to packages.config
            </summary>
            <param name="version">Minumum version of the client required to parse and use this file.</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.AddPackageEntry(System.String,NuGet.Versioning.NuGetVersion,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Add a package entry
            </summary>
            <param name="packageId">Package Id</param>
            <param name="version">Package Version</param>
            <param name="targetFramework">Package targetFramework that's compatible with current project</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.AddPackageEntry(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Adds a basic package entry to the file
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.AddPackageEntry(NuGet.Packaging.PackageReference)">
            <summary>
            Adds a package entry to the file
            </summary>
            <param name="entry">Package reference entry</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.UpdatePackageEntry(NuGet.Packaging.PackageReference,NuGet.Packaging.PackageReference)">
            <summary>
            Update a package entry to the file
            </summary>
            <param name="entry">Package reference entry</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.UpdateOrAddPackageEntry(System.Xml.Linq.XDocument,NuGet.Packaging.PackageReference)">
            <summary>
            Update a package entry using the original entry as a base if it exists.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.RemovePackageEntry(System.String,NuGet.Versioning.NuGetVersion,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Remove a package entry
            </summary>
            <param name="packageId">Package Id</param>
            <param name="version">Package version</param>
            <param name="targetFramework">Package targetFramework</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.RemovePackageEntry(NuGet.Packaging.Core.PackageIdentity,NuGet.Frameworks.NuGetFramework)">
            <summary>
            Remove a package identity from the file
            </summary>
            <param name="identity">Package identity</param>
            <param name="targetFramework">Package targetFramework</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.RemovePackageEntry(NuGet.Packaging.PackageReference)">
            <summary>
            Removes a package entry from the file
            </summary>
            <param name="entry">Package reference entry</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.WriteFile(System.String)">
            <summary>
            Write the XDocument to the packages.config and disallow further changes.
            </summary>
            <param name="fullPath">the full path to packages.config file</param>
        </member>
        <member name="M:NuGet.Packaging.PackagesConfigWriter.Dispose">
            <summary>
            Write the XDocument to the stream and close it to disallow further changes.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.INuspecReader">
            <summary>
            A development package nuspec reader
            </summary>
        </member>
        <member name="M:NuGet.Packaging.INuspecReader.GetLanguage">
            <summary>
            The locale ID for the package, such as en-us.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageReader.GetFrameworkItems">
            <summary>
            Returns all framework references found in the nuspec.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageReader.GetBuildItems">
            <summary>
            Returns all items under the build folder.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageReader.GetToolItems">
            <summary>
            Returns all items under the tools folder.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageReader.GetContentItems">
            <summary>
            Returns all items found in the content folder.
            </summary>
            <remarks>
            Some legacy behavior has been dropped here due to the mix of content folders and target framework
            folders here.
            </remarks>
        </member>
        <member name="M:NuGet.Packaging.IPackageReader.GetLibItems">
            <summary>
            Returns all lib items without any filtering. Use GetReferenceItems for the filtered list.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageReader.GetReferenceItems">
            <summary>
            Returns lib items + filtering based on the nuspec and other NuGet rules.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageReader.GetPackageDependencies">
            <summary>
            Returns package dependencies.
            </summary>
        </member>
        <member name="T:NuGet.Packaging.IPackageResolver">
            <summary>
            Core package resolver
            </summary>
        </member>
        <member name="M:NuGet.Packaging.IPackageResolver.Resolve(System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageIdentity},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependencyInfo},System.Threading.CancellationToken)">
            <summary>
            Resolve a set of packages
            </summary>
            <param name="targets">Package or packages to install</param>
            <param name="availablePackages">All relevant packages. This list must include the target packages.</param>
            <returns>A set of packages meeting the package dependency requirements</returns>
        </member>
        <member name="M:NuGet.Packaging.IPackageResolver.Resolve(System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageIdentity},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependencyInfo},System.Collections.Generic.IEnumerable{NuGet.Packaging.PackageReference},System.Threading.CancellationToken)">
            <summary>
            Resolve a set of packages
            </summary>
            <param name="targets">Package or packages to install</param>
            <param name="availablePackages">
            All relevant packages. This list must include the target packages and
            installed packages.
            </param>
            <param name="installedPackages">
            Packages already installed into the project. These will be favored as
            dependency options.
            </param>
            <returns>A set of packages meeting the package dependency requirements</returns>
        </member>
        <member name="M:NuGet.Packaging.IPackageResolver.Resolve(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependencyInfo},System.Threading.CancellationToken)">
            <summary>
            Resolve a set of packages
            </summary>
            <param name="targets">Package or packages to install</param>
            <param name="availablePackages">All relevant packages. This list must include the target packages.</param>
            <returns>A set of packages meeting the package dependency requirements</returns>
        </member>
        <member name="M:NuGet.Packaging.IPackageResolver.Resolve(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{NuGet.Packaging.Core.PackageDependencyInfo},System.Collections.Generic.IEnumerable{NuGet.Packaging.PackageReference},System.Threading.CancellationToken)">
            <summary>
            Resolve a set of packages
            </summary>
            <param name="targets">Package or packages to install</param>
            <param name="availablePackages">
            All relevant packages. This list must include the target packages and
            installed packages.
            </param>
            <param name="installedPackages">
            Packages already installed into the project. These will be favored as
            dependency options.
            </param>
            <returns>A set of packages meeting the package dependency requirements</returns>
        </member>
        <member name="P:NuGet.Packaging.PackageExtractionContext.UseLegacyPackageInstallPath">
            <summary>
            If True package folder paths will use the non-normalized version path,
            even for new installs.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageHelper.IsSatellitePackage(NuGet.Packaging.NuspecReader,NuGet.Packaging.Core.PackageIdentity@,System.String@)">
            <summary>
            A package is deemed to be a satellite package if it has a language property set, the id of the package is
            of the format [.*].[Language]
            and it has at least one dependency with an id that maps to the runtime package .
            </summary>
        </member>
        <member name="M:NuGet.Packaging.PackageHelper.GetInstalledPackageFiles(System.IO.Stream,NuGet.Packaging.Core.PackageIdentity,NuGet.Packaging.PackagePathResolver,NuGet.Packaging.PackageSaveModes,System.Threading.CancellationToken)">
            <summary>
            This returns all the installed package files (does not include satellite files)
            </summary>
            <param name="packageIdentity"></param>
            <param name="packagePathResolver"></param>
            <param name="packageDirectory"></param>
            <param name="packageSaveMode"></param>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorDuplicatePackages">
            <summary>
            There are duplicate packages: {0}
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Strings.FormatErrorDuplicatePackages(System.Object)">
            <summary>
            There are duplicate packages: {0}
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorInvalidAllowedVersions">
            <summary>
            Invalid allowedVersions for package id '{0}': '{1}'
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Strings.FormatErrorInvalidAllowedVersions(System.Object,System.Object)">
            <summary>
            Invalid allowedVersions for package id '{0}': '{1}'
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorInvalidMinClientVersion">
            <summary>
            Invalid minClientVersion: '{0}'
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Strings.FormatErrorInvalidMinClientVersion(System.Object)">
            <summary>
            Invalid minClientVersion: '{0}'
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorInvalidPackageVersion">
            <summary>
            Invalid package version for package id '{0}': '{1}'
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Strings.FormatErrorInvalidPackageVersion(System.Object,System.Object)">
            <summary>
            Invalid package version for package id '{0}': '{1}'
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.ErrorNullOrEmptyPackageId">
            <summary>
            Null or empty package id
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Strings.FormatErrorNullOrEmptyPackageId">
            <summary>
            Null or empty package id
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.Log_InstallingPackage">
            <summary>
            Installing {0} {1}.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Strings.FormatLog_InstallingPackage(System.Object,System.Object)">
            <summary>
            Installing {0} {1}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.FailToLoadPackagesConfig">
            <summary>
            Fail to load packages.config as XML file. Please check it. 
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.FailToWritePackagesConfig">
            <summary>
            Fail to write packages.config as XML file while accessing {0}: {1} 
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Strings.FormatFailToWritePackagesConfig(System.Object,System.Object)">
            <summary>
            Fail to write packages.config as XML file while accessing {0}: {1} 
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.MinClientVersionAlreadyExist">
            <summary>
            MinClientVersion already exists in packages.config
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Strings.FormatMinClientVersionAlreadyExist">
            <summary>
            MinClientVersion already exists in packages.config
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.MissingNuspec">
            <summary>
            Nuspec file does not exist in package.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Strings.FormatMissingNuspec">
            <summary>
            Nuspec file does not exist in package.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.PackageEntryAlreadyExist">
            <summary>
            Package entry already exists in packages.config. Id: {0}
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Strings.FormatPackageEntryAlreadyExist(System.Object)">
            <summary>
            Package entry already exists in packages.config. Id: {0}
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.PackageEntryNotExist">
            <summary>
            Package entry does not exists in packages.config. Id: {0}, Version: {1}
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Strings.FormatPackageEntryNotExist(System.Object,System.Object)">
            <summary>
            Package entry does not exists in packages.config. Id: {0}, Version: {1}
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.PackagesNodeNotExist">
            <summary>
            Packages node does not exists in packages.config at {0}.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Strings.FormatPackagesNodeNotExist(System.Object)">
            <summary>
            Packages node does not exists in packages.config at {0}.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.PackageStreamShouldBeSeekable">
            <summary>
            Package stream should be seekable
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Strings.FormatPackageStreamShouldBeSeekable">
            <summary>
            Package stream should be seekable
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.StringCannotBeNullOrEmpty">
            <summary>
            String argument '{0}' cannot be null or empty
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Strings.FormatStringCannotBeNullOrEmpty(System.Object)">
            <summary>
            String argument '{0}' cannot be null or empty
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.UnableToAddEntry">
            <summary>
            An error occurred while updating packages.config. The file was closed before the entry could be added.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Strings.FormatUnableToAddEntry">
            <summary>
            An error occurred while updating packages.config. The file was closed before the entry could be added.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.MultipleNuspecFiles">
            <summary>
            Package contains multiple nuspec files.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Strings.FormatMultipleNuspecFiles">
            <summary>
            Package contains multiple nuspec files.
            </summary>
        </member>
        <member name="P:NuGet.Packaging.Strings.InvalidNuspecEntry">
            <summary>
            The nuspec contains an invalid '{0}' entry.
            </summary>
        </member>
        <member name="M:NuGet.Packaging.Strings.FormatInvalidNuspecEntry(System.Object,System.Object)">
            <summary>
            The nuspec contains an invalid '{0}' entry.
            </summary>
        </member>
        <member name="T:NuGet.Common.HashCodeCombiner">
            <summary>
            Hash code creator, based on the original NuGet hash code combiner/ASP hash code combiner implementations
            </summary>
        </member>
        <member name="M:NuGet.Common.HashCodeCombiner.GetHashCode(System.Object[])">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
    </members>
</doc>
