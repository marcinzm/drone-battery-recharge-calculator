<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NuGet.Configuration</name>
    </assembly>
    <members>
        <member name="F:NuGet.Configuration.PackageSource.DefaultProtocolVersion">
            <summary>
            The feed version for NuGet prior to v3.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.PackageSource.IsOfficial">
            <summary>
            This does not represent just the NuGet Official Feed alone
            It may also represent a Default Package Source set by Configuration Defaults
            </summary>
        </member>
        <member name="P:NuGet.Configuration.PackageSource.ProtocolVersion">
            <summary>
            Gets or sets the protocol version of the source. Defaults to 2.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.PackageSource.IsLocal">
            <summary>
            True if the source path is file based. Unc shares are not included.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.PackageSource.Origin">
            <summary>
            Gets the <see cref="T:NuGet.Configuration.ISettings"/> that this source originated from. May be null.
            </summary>
        </member>
        <member name="M:NuGet.Configuration.PackageSourceProvider.#ctor(NuGet.Configuration.ISettings,System.Collections.Generic.IEnumerable{NuGet.Configuration.PackageSource})">
            <summary>
            Creates a new PackageSourceProvider instance.
            </summary>
            <param name="settings">Specifies the settings file to use to read package sources.</param>
            <param name="providerDefaultPrimarySources">The primary default sources you would like to use</param>
        </member>
        <member name="M:NuGet.Configuration.PackageSourceProvider.#ctor(NuGet.Configuration.ISettings,System.Collections.Generic.IEnumerable{NuGet.Configuration.PackageSource},System.Collections.Generic.IEnumerable{NuGet.Configuration.PackageSource})">
            <summary>
            Creates a new PackageSourceProvider instance.
            </summary>
            <param name="settings">Specifies the settings file to use to read package sources.</param>
            <param name="providerDefaultPrimarySources">The primary default sources you would like to use</param>
            <param name="providerDefaultSecondarySources">The secondary default sources you would like to use</param>
        </member>
        <member name="M:NuGet.Configuration.PackageSourceProvider.LoadPackageSources">
            <summary>
            Returns PackageSources if specified in the config file. Else returns the default sources specified in the
            constructor.
            If no default values were specified, returns an empty sequence.
            </summary>
        </member>
        <member name="M:NuGet.Configuration.PackageSourceProvider.OnPackageSourcesChanged">
            <summary>
            Fires event PackageSourcesChanged
            </summary>
        </member>
        <member name="P:NuGet.Configuration.PackageSourceProvider.ActivePackageSourceName">
            <summary>
            Gets the name of the ActivePackageSource from NuGet.Config
            </summary>
        </member>
        <member name="M:NuGet.Configuration.PackageSourceProvider.SaveActivePackageSource(NuGet.Configuration.PackageSource)">
            <summary>
            Saves the <paramref name="source" /> as the active source.
            </summary>
            <param name="source"></param>
        </member>
        <member name="P:NuGet.Configuration.Resources.Argument_Cannot_Be_Null_Or_Empty">
            <summary>
            Value cannot be null or empty string.
            </summary>
        </member>
        <member name="M:NuGet.Configuration.Resources.FormatArgument_Cannot_Be_Null_Or_Empty">
            <summary>
            Value cannot be null or empty string.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.Error_NoWritableConfig">
            <summary>
            There are no writable config files.
            </summary>
        </member>
        <member name="M:NuGet.Configuration.Resources.FormatError_NoWritableConfig">
            <summary>
            There are no writable config files.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.FileDoesNotExist">
            <summary>
            File '{0}' does not exist.
            </summary>
        </member>
        <member name="M:NuGet.Configuration.Resources.FormatFileDoesNotExist(System.Object)">
            <summary>
            File '{0}' does not exist.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.InvalidNullSettingsOperation">
            <summary>
            "{0}" cannot be called on a NullSettings. This may be caused on account of insufficient permissions to read or write to "%AppData%\NuGet\NuGet.config".
            </summary>
        </member>
        <member name="M:NuGet.Configuration.Resources.FormatInvalidNullSettingsOperation(System.Object)">
            <summary>
            "{0}" cannot be called on a NullSettings. This may be caused on account of insufficient permissions to read or write to "%AppData%\NuGet\NuGet.config".
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.PackageSource_Invalid">
            <summary>
            The package source does not belong to the collection of available sources.
            </summary>
        </member>
        <member name="M:NuGet.Configuration.Resources.FormatPackageSource_Invalid">
            <summary>
            The package source does not belong to the collection of available sources.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.Settings_FileName_Cannot_Be_A_Path">
            <summary>
            Parameter 'fileName' to Settings must be just a fileName and not a path
            </summary>
        </member>
        <member name="M:NuGet.Configuration.Resources.FormatSettings_FileName_Cannot_Be_A_Path">
            <summary>
            Parameter 'fileName' to Settings must be just a fileName and not a path
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.UnsupportedHashAlgorithm">
            <summary>
            Hash algorithm '{0}' is unsupported. Supported algorithms include: SHA512 and SHA256.
            </summary>
        </member>
        <member name="M:NuGet.Configuration.Resources.FormatUnsupportedHashAlgorithm(System.Object)">
            <summary>
            Hash algorithm '{0}' is unsupported. Supported algorithms include: SHA512 and SHA256.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Resources.UserSettings_UnableToParseConfigFile">
            <summary>
            Unable to parse config file '{0}'.
            </summary>
        </member>
        <member name="M:NuGet.Configuration.Resources.FormatUserSettings_UnableToParseConfigFile(System.Object)">
            <summary>
            Unable to parse config file '{0}'.
            </summary>
        </member>
        <member name="F:NuGet.Configuration.ProxyCache._originalSystemProxy">
            <summary>
            Capture the default System Proxy so that it can be re-used by the IProxyFinder
            because we can't rely on WebRequest.DefaultWebProxy since someone can modify the DefaultWebProxy
            property and we can't tell if it was modified and if we are still using System Proxy Settings or not.
            One limitation of this method is that it does not look at the config file to get the defined proxy
            settings.
            </summary>
        </member>
        <member name="M:NuGet.Configuration.ProxyCache.IsSystemProxySet(System.Uri)">
            <summary>
            Return true or false if connecting through a proxy server
            </summary>
            <param name="uri"></param>
            <returns></returns>
        </member>
        <member name="M:NuGet.Configuration.ConfigurationDefaults.#ctor(System.String,System.String)">
            <summary>
            An internal constructor MAINLY INTENDED FOR TESTING THE CLASS. But, the product code is only expected to
            use the static Instance property
            Only catches FileNotFoundException. Will throw all exceptions including other IOExceptions and
            XmlExceptions for invalid xml and so on
            </summary>
            <param name="directory">The directory that has the NuGetDefaults.Config</param>
            <param name="configFile">Name of the NuGetDefaults.Config</param>
        </member>
        <member name="T:NuGet.Configuration.ISettings">
            <summary>
            Interface to expose NuGet Settings
            </summary>
        </member>
        <member name="P:NuGet.Configuration.ISettings.Root">
            <summary>
            Folder under which the config file is present
            </summary>
        </member>
        <member name="M:NuGet.Configuration.ISettings.GetValue(System.String,System.String,System.Boolean)">
            <summary>
            Gets a value for the given key from the given section
            If isPath is true, then the value represents a path. If the path value is already rooted, it is simply
            returned
            Otherwise, path relative to ISettings.Root is returned
            </summary>
        </member>
        <member name="M:NuGet.Configuration.ISettings.GetSettingValues(System.String,System.Boolean)">
            <summary>
            Gets all the values under section
            </summary>
        </member>
        <member name="M:NuGet.Configuration.ISettings.GetNestedValues(System.String,System.String)">
            <summary>
            Gets all the values under section
            </summary>
        </member>
        <member name="M:NuGet.Configuration.ISettings.SetValues(System.String,System.Collections.Generic.IReadOnlyList{NuGet.Configuration.SettingValue})">
            <summary>
            Sets the values under the specified <paramref name="section" />.
            </summary>
            <param name="section">The name of the section.</param>
            <param name="values">The values to set.</param>
        </member>
        <member name="M:NuGet.Configuration.ISettings.UpdateSections(System.String,System.Collections.Generic.IReadOnlyList{NuGet.Configuration.SettingValue})">
            <summary>
            Updates the <paramref name="values" /> across multiple <see cref="T:NuGet.Configuration.ISettings" /> instances in the hierarchy.
            Values are updated in the <see cref="T:NuGet.Configuration.ISettings" /> with the nearest priority.
            </summary>
            <param name="section">The name of the section.</param>
            <param name="values">The values to set.</param>
        </member>
        <member name="E:NuGet.Configuration.ISettings.SettingsChanged">
            <summary>
            Event raised when the setting have been changed.
            </summary>
        </member>
        <member name="T:NuGet.Configuration.Settings">
            <summary>
            Concrete implementation of ISettings to support NuGet Settings
            </summary>
        </member>
        <member name="F:NuGet.Configuration.Settings.DefaultSettingsFileName">
            <summary>
            Default file name for a settings file is 'NuGet.config'
            Also, the machine level setting file at '%APPDATA%\NuGet' always uses this name
            </summary>
        </member>
        <member name="F:NuGet.Configuration.Settings.OrderedSettingsFileNames">
            <summary>
            NuGet config names with casing ordered by precedence.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Settings.Root">
            <summary>
            Folder under which the config file is present
            </summary>
        </member>
        <member name="P:NuGet.Configuration.Settings.ConfigFilePath">
            <summary>
            Full path to the ConfigFile corresponding to this Settings object
            </summary>
        </member>
        <member name="M:NuGet.Configuration.Settings.LoadDefaultSettings(System.String,System.String,NuGet.Configuration.IMachineWideSettings)">
            <summary>
            Loads user settings from the NuGet configuration files. The method walks the directory
            tree in <paramref name="fileSystem" /> up to its root, and reads each NuGet.config file
            it finds in the directories. It then reads the user specific settings,
            which is file <paramref name="configFileName" />
            in <paramref name="fileSystem" /> if <paramref name="configFileName" /> is not null,
            If <paramref name="configFileName" /> is null, the user specific settings file is
            %AppData%\NuGet\NuGet.config.
            After that, the machine wide settings files are added.
            </summary>
            <remarks>
            For example, if <paramref name="fileSystem" /> is c:\dir1\dir2, <paramref name="configFileName" />
            is "userConfig.file", the files loaded are (in the order that they are loaded):
            c:\dir1\dir2\nuget.config
            c:\dir1\nuget.config
            c:\nuget.config
            c:\dir1\dir2\userConfig.file
            machine wide settings (e.g. c:\programdata\NuGet\Config\*.config)
            </remarks>
            <param name="fileSystem">
            The file system to walk to find configuration files.
            Can be null.
            </param>
            <param name="configFileName">The user specified configuration file.</param>
            <param name="machineWideSettings">
            The machine wide settings. If it's not null, the
            settings files in the machine wide settings are added after the user sepcific
            config file.
            </param>
            <returns>The settings object loaded.</returns>
        </member>
        <member name="M:NuGet.Configuration.Settings.LoadDefaultSettings(System.String,System.String,NuGet.Configuration.IMachineWideSettings,System.Boolean)">
            <summary>
            For internal use only
            </summary>
        </member>
        <member name="M:NuGet.Configuration.Settings.LoadMachineWideSettings(System.String,System.String[])">
            <summary>
            Loads the machine wide settings.
            </summary>
            <remarks>
            For example, if <paramref name="paths" /> is {"IDE", "Version", "SKU" }, then
            the files loaded are (in the order that they are loaded):
            %programdata%\NuGet\Config\IDE\Version\SKU\*.config
            %programdata%\NuGet\Config\IDE\Version\*.config
            %programdata%\NuGet\Config\IDE\*.config
            %programdata%\NuGet\Config\*.config
            </remarks>
            <param name="root">The file system in which the settings files are read.</param>
            <param name="paths">The additional paths under which to look for settings files.</param>
            <returns>The list of settings read.</returns>
        </member>
        <member name="M:NuGet.Configuration.Settings.GetSettingsFileNames(System.String)">
            <remarks>
            Order is most significant (e.g. applied last) to least significant (applied first)
            ex:
            c:\someLocation\nuget.config
            c:\nuget.config
            </remarks>
        </member>
        <member name="M:NuGet.Configuration.Settings.GetSettingsFileNameFromDir(System.String)">
            <summary>
            Checks for each possible casing of nuget.config in the directory. The first match is
            returned. If there are no nuget.config files null is returned.
            </summary>
            <remarks>For windows <see cref="F:NuGet.Configuration.Settings.OrderedSettingsFileNames"/> contains a single casing since
            the file system is case insensitive.</remarks>
        </member>
        <member name="M:NuGet.Configuration.Settings.ExecuteSynchronized(System.Action)">
            <summary>
            Wrap all IO operations on setting files with this function to avoid file-in-use errors
            </summary>
        </member>
        <member name="T:NuGet.Configuration.SettingValue">
            <summary>
            Represents a single setting value in a settings file
            </summary>
        </member>
        <member name="P:NuGet.Configuration.SettingValue.Key">
            <summary>
            Represents the key of the setting
            </summary>
        </member>
        <member name="P:NuGet.Configuration.SettingValue.Value">
            <summary>
            Represents the value of the setting
            </summary>
        </member>
        <member name="P:NuGet.Configuration.SettingValue.OriginalValue">
            <summary>
            original value of the source as in NuGet.Config
            </summary>
        </member>
        <member name="P:NuGet.Configuration.SettingValue.IsMachineWide">
            <summary>
            IsMachineWide tells if the setting is machine-wide or not
            </summary>
        </member>
        <member name="P:NuGet.Configuration.SettingValue.Priority">
            <summary>
            The priority of this setting in the nuget.config hierarchy. Bigger number means higher priority
            </summary>
        </member>
        <member name="P:NuGet.Configuration.SettingValue.Origin">
            <summary>
            Gets the <see cref="T:NuGet.Configuration.ISettings"/> that provided this value.
            </summary>
        </member>
        <member name="P:NuGet.Configuration.SettingValue.AdditionalData">
            <summary>
            Gets additional values with the specified setting.
            </summary>
            <remarks>
            When reading from an XML based settings file, this includes all attributes on the element
            other than the <c>Key</c> and <c>Value</c>.
            </remarks>
        </member>
        <member name="T:NuGet.Configuration.CryptoHashProvider">
            <summary>
            CryptoHashProvider helps calculate or verify hash based on SHA256 or SHA512 algorithms
            </summary>
        </member>
        <member name="F:NuGet.Configuration.CryptoHashProvider.SHA512HashAlgorithm">
            <summary>
            Server token used to represent that the hash being used is SHA 512
            </summary>
        </member>
        <member name="F:NuGet.Configuration.CryptoHashProvider.SHA256HashAlgorithm">
            <summary>
            Server token used to represent that the hash being used is SHA 256
            </summary>
        </member>
        <member name="M:NuGet.Configuration.CryptoHashProvider.#ctor">
            <summary>
            Creates an instance of CryptoHashProvider. Since the algorithm is not specified, SHA512 is assumed
            </summary>
        </member>
        <member name="M:NuGet.Configuration.CryptoHashProvider.#ctor(System.String)">
            <summary>
            Creates an instance of CryptoHashProvider using the hashAlgorithm
            </summary>
        </member>
        <member name="P:NuGet.Configuration.CryptoHashProvider.AllowOnlyFipsAlgorithms">
            <summary>
            Determines if we are to only allow Fips compliant algorithms.
            </summary>
            <remarks>
            CryptoConfig.AllowOnlyFipsAlgorithm does not exist in Mono.
            </remarks>
        </member>
        <member name="M:NuGet.Configuration.CryptoHashProvider.CalculateHash(System.IO.Stream)">
            <summary>
            Calculates the hash for a given stream
            </summary>
        </member>
        <member name="M:NuGet.Configuration.CryptoHashProvider.CalculateHash(System.Byte[])">
            <summary>
            Calculates the hash for a byte array
            </summary>
        </member>
        <member name="M:NuGet.Configuration.CryptoHashProvider.VerifyHash(System.Byte[],System.Byte[])">
            <summary>
            Verifies the hash for the given data and hash
            </summary>
        </member>
        <member name="T:NuGet.Configuration.IExtensionLocator">
            <summary>
            Provides a common facility for locating extensions
            </summary>
        </member>
        <member name="M:NuGet.Configuration.IExtensionLocator.FindExtensions">
            <summary>
            Find paths to all extensions
            </summary>
        </member>
        <member name="M:NuGet.Configuration.IExtensionLocator.FindCredentialProviders">
            <summary>
            Find paths to all credential providers
            </summary>
        </member>
        <member name="M:NuGet.Configuration.SettingsUtility.GetConfigValue(NuGet.Configuration.ISettings,System.String,System.Boolean,System.Boolean)">
            <summary>
            Retrieves a config value for the specified key
            </summary>
            <param name="settings">The settings instance to retrieve </param>
            <param name="key">The key to look up</param>
            <param name="decrypt">Determines if the retrieved value needs to be decrypted.</param>
            <param name="isPath">Determines if the retrieved value is returned as a path.</param>
            <returns>Null if the key was not found, value from config otherwise.</returns>
        </member>
        <member name="M:NuGet.Configuration.SettingsUtility.SetConfigValue(NuGet.Configuration.ISettings,System.String,System.String,System.Boolean)">
            <summary>
            Sets a config value in the setting.
            </summary>
            <param name="settings">The settings instance to store the key-value in.</param>
            <param name="key">The key to store.</param>
            <param name="value">The value to store.</param>
            <param name="encrypt">Determines if the value needs to be encrypted prior to storing.</param>
        </member>
        <member name="M:NuGet.Configuration.SettingsUtility.DeleteConfigValue(NuGet.Configuration.ISettings,System.String)">
            <summary>
            Deletes a config value from settings
            </summary>
            <param name="settings">The settings instance to delete the key from.</param>
            <param name="key">The key to delete.</param>
            <returns>True if the value was deleted, false otherwise.</returns>
        </member>
        <member name="T:NuGet.Common.HashCodeCombiner">
            <summary>
            Hash code creator, based on the original NuGet hash code combiner/ASP hash code combiner implementations
            </summary>
        </member>
        <member name="M:NuGet.Common.HashCodeCombiner.GetHashCode(System.Object[])">
            <summary>
            Create a unique hash code for the given set of items
            </summary>
        </member>
    </members>
</doc>
